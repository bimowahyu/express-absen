class AbsensiController {
    getHari() {
        const hari = new Date().toLocaleDateString('en-US', { weekday: 'short' });
        let namaHari = '';

        switch (hari) {
            case 'Sun':
                namaHari = "Minggu";
                break;
            case 'Mon':
                namaHari = "Senin";
                break;
            case 'Tue':
                namaHari = "Selasa";
                break;
            case 'Wed':
                namaHari = "Rabu";
                break;
            case 'Thu':
                namaHari = "Kamis";
                break;
            case 'Fri':
                namaHari = "Jumat";
                break;
            case 'Sat':
                namaHari = "Sabtu";
                break;
            default:
                namaHari = "Tidak Diketahui";
                break;
        }

        return namaHari;
    }

    create() {
        const hariIni = new Date().toISOString().split('T')[0];
        const karyawanId = Auth.guard('karyawan').user().id;
        const karyawan = Auth.guard('karyawan').user();
        const absensiHariIni = Absensi.where('karyawan_id', karyawanId).where('tgl_absensi', hariIni).first();
        const cek = Absensi.where('tgl_absensi', hariIni).where('karyawan_id', karyawan.id).count();
        const lokasi = Cabang.find(karyawan.cabang_id);
        const jamKerja = JamsById.where('karyawan_id', karyawan.id)
            .join('jams', 'jams_by_ids.jam_id', '=', 'jams.id')
            .where('hari', this.getHari())
            .first();

        return view('absensi.create', { cek, lokasi, jamKerja, absensiHariIni });
    }


    store(request) {
        const karyawan = Auth.guard('karyawan').user();
        const nik = karyawan.nik;
        const tglAbsensi = new Date().toISOString().split('T')[0];

        const lokasiKantor = Cabang.find(karyawan.cabang_id);
        const [latitudeKantor, longitudeKantor] = lokasiKantor.lokasi_kantor.split(",");
        const lokasi = request.lokasi;
        const [latitudeUser, longitudeUser] = lokasi.split(",");
        const jarak = this.distance(latitudeKantor, longitudeKantor, latitudeUser, longitudeUser);
        const radius = Math.round(jarak.meters);

        const namaHari = this.getHari();
        const jamKerja = JamsById.where('karyawan_id', karyawan.id)
            .join('jams', 'jams_by_ids.jam_id', '=', 'jams.id')
            .where('hari', namaHari).first();
        const jam = new Date().toLocaleTimeString('en-US', { hour12: false });

        const cek = Absensi.where('tgl_absensi', tglAbsensi).where('karyawan_id', karyawan.id).count();
        const ket = (cek > 0) ? "keluar" : "masuk";

        const image = request.image;
        const folderPath = "public/uploads/absensi/";
        const formatName = ${nik}-${tglAbsensi}-${ket};
        const [imageType, imageData] = image.split(";base64,");
        const file = ${folderPath}${formatName}.png;

        if (radius > lokasiKantor.radius) {
            console.log(error|Maaf, Anda berada di luar radius kantor. Jarak Anda ${radius} meter dari kantor|radius);
        } else {
            if (cek > 0) {
                if (jam < jamKerja.set_jamPulang) {
                    console.log("Error | Maaf, belum waktunya pulang |masuk");
                } else {
                    const dataPulang = {
                        'jam_keluar': jam,
                        'foto_keluar': ${formatName}.png,
                        'lokasi_keluar': lokasi,
                    };
                    const update = Absensi.where('tgl_absensi', tglAbsensi).where('karyawan_id', karyawan.id).update(dataPulang);
                    if (update) {
                        console.log("success|Terima Kasih, Hati-hati di jalan|keluar");
                        Storage.put(file, atob(imageData));
                    } else {
                        console.log(1);
                    }
                }
            } else {
                if (jam < jamKerja.awal_jamMasuk) {
                    console.log("Error | Maaf, belum waktunya melakukan absensi |masuk");
                } else if (jam > jamKerja.akhir_jamMasuk) {
                    console.log("Error | Maaf, Anda sudah melewati batas waktu absensi |masuk");
                } else {
                    const dataMasuk = {
                        'karyawan_id': karyawan.id,
                        'jam_id': jamKerja.jam_id,
                        'tgl_absensi': tglAbsensi,
                        'jam_masuk': jam,
                        'foto_masuk': ${formatName}.png,
                        'lokasi_masuk': lokasi,
                    };
                    const simpan = Absensi.create(dataMasuk);
                    if (simpan) {
                        console.log("success|Absensi berhasil, Selamat bekerja|masuk");
                        Storage.put(file, atob(imageData));
                    } else {
                        console.log("Error | Maaf, gagal melakukan absensi, silahkan hubungi tim IT |masuk");
                    }
                }
            }
        }
    }

    distance(lat1, lon1, lat2, lon2) {
        const theta = lon1 - lon2;
        let miles = (Math.sin(this.deg2rad(lat1)) * Math.sin(this.deg2rad(lat2))) + (Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) * Math.cos(this.deg2rad(theta)));
        miles = Math.acos(miles);
        miles = this.rad2deg(miles);
        miles = miles * 60 * 1.1515;
        const feet = miles * 5280;
        const yards = feet / 3;
        const kilometers = miles * 1.609344;
        const meters = kilometers * 1000;

        return { meters };
    }

    deg2rad(deg) {
        return deg * (Math.PI / 180);
    }

    rad2deg(rad) {
        return rad * (180 / Math.PI);
    }

    edit() {
        const karyawanId = Auth.guard('karyawan').user().id;
        const karyawan = Karyawan.where('id', karyawanId).first();
        return view('absensi.edit', { karyawan });
    }

    update(request) {
        const karyawan = Auth.guard('karyawan').user();
        const karyawanId = karyawan.id;
        const nik = karyawan.nik;
        const namaLengkap = request.nama_lengkap;
        const noTelp = request.no_telp;
        const password = request.password ? Hash.make(request.password) : karyawan.password;
        const avatar = request.hasFile('avatar') ? ${nik}.${request.file('avatar').getClientOriginalExtension()} : karyawan.avatar;

        const data = {
            'nama_lengkap': namaLengkap,
            'no_telp': noTelp,
            'password': password,
            'avatar': avatar
        };

        const update = Karyawan.where('id', karyawanId).update(data);
        if (update) {
            if (request.hasFile('avatar')) {
                const folderPath = "public/uploads/karyawan/";
                request.file('avatar').storeAs(folderPath, avatar);
            }
            return Redirect.back().with('success', 'Data Profile berhasil diupdate');
        } else {
            return Redirect.back().with('error', "Data profile gagal diupdate, cek kembali");
        }
    }

    history() {
        const namaBulan = ["", "Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"];
        return view('absensi.history', { namaBulan });
    }

    getHistory(request) {
        const bulan = request.bulan;
        const tahun = request.tahun;
        const karyawanId = Auth.guard('karyawan').user().id;
        const history = Absensi.whereRaw(MONTH(tgl_absensi)="${bulan}")
            .whereRaw(YEAR(tgl_absensi)="${tahun}")
            .where('karyawan_id', karyawanId).orderBy('tgl_absensi').get();

        return view('absensi.getHistory', { history });
    }

    monitoring() {
        const absensi = Absensi.all();
        return view('dashboard.admin.monitoring.index', { absensi });
    }

    getAbsensi(request) {
        const tanggal = request.tanggal;
        const absensi = DB.table('absensis')
            .select('absensis.*', 'nik', 'nama_lengkap', 'nama_department', 'akhir_jamMasuk', 'nama_jamKerja', 'set_jamPulang')
            .join('karyawans', 'absensis.karyawan_id', '=', 'karyawans.id')
            .join('jams', 'absensis.jam_id', '=', 'jams.id')
            .join('departments', 'karyawans.department_id', '=', 'departments.id')
            .where('tgl_absensi', tanggal)
            .get();

        return view('dashboard.admin.monitoring.getAbsensi', { absensi });
    }

    getMap(request) {
        const id = request.id;
        const absensi = Absensi.where('id', id).first();

        return view('dashboard.admin.monitoring.getMap', { absensi });
    }

    laporanAbsensi() {
        const namaBulan = ["", "Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"];
        const karyawan = Karyawan.orderBy("nama_lengkap").get();
        return view('dashboard.admin.laporan.laporanabsensi', { namaBulan, karyawan });
    }

    cetakLaporan(request) {
        const karyawanId = request.id;
        const namaBulan = ["", "Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"];
        const bulan = request.bulan;
        const tahun = request.tahun;
        const karyawan = Karyawan.with('department').where('id', karyawanId).first();
        const absensi = Absensi.where('karyawan_id', karyawanId)
            .join('jams', 'absensis.jam_id', '=', 'jams.id')
            .whereRaw(MONTH(tgl_absensi)="${bulan}")
            .whereRaw(YEAR(tgl_absensi)="${tahun}")
            .orderBy('tgl_absensi')
            .get();


        return view('dashboard.admin.laporan.cetakLaporan', { namaBulan, tahun, bulan, karyawan, absensi });
    }

    rekapAbsensi() {
        const namaBulan = ["", "Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"];

        return view('dashboard.admin.laporan.rekapAbsensi', { namaBulan });
    }

    cetakRekap(request) {
        const namaBulan = ["", "Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"];
        const bulan = request.bulan;
        const tahun = request.tahun;
        const rekap = DB.table('absensis')
            .selectRaw(`absensis.karyawan_id,nik,nama_lengkap,akhir_jamMasuk,set_jamPulang,
        MAX(IF(DAY(tgl_absensi) = 1,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_1,
        MAX(IF(DAY(tgl_absensi) = 2,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_2,
        MAX(IF(DAY(tgl_absensi) = 3,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_3,
        MAX(IF(DAY(tgl_absensi) = 4,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_4,
        MAX(IF(DAY(tgl_absensi) = 5,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_5,
        MAX(IF(DAY(tgl_absensi) = 6,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_6,
        MAX(IF(DAY(tgl_absensi) = 7,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_7,
        MAX(IF(DAY(tgl_absensi) = 8,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_8,
        MAX(IF(DAY(tgl_absensi) = 9,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_9,
        MAX(IF(DAY(tgl_absensi) = 10,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_10,
        MAX(IF(DAY(tgl_absensi) = 11,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_11,
        MAX(IF(DAY(tgl_absensi) = 12,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_12,
        MAX(IF(DAY(tgl_absensi) = 13,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_13,
        MAX(IF(DAY(tgl_absensi) = 14,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_14,
        MAX(IF(DAY(tgl_absensi) = 15,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_15,
        MAX(IF(DAY(tgl_absensi) = 16,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_16,
        MAX(IF(DAY(tgl_absensi) = 17,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_17,
        MAX(IF(DAY(tgl_absensi) = 18,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_18,
        MAX(IF(DAY(tgl_absensi) = 19,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_19,
        MAX(IF(DAY(tgl_absensi) = 20,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_20,
        MAX(IF(DAY(tgl_absensi) = 21,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_21,
        MAX(IF(DAY(tgl_absensi) = 22,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_22,
        MAX(IF(DAY(tgl_absensi) = 23,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_23,
        MAX(IF(DAY(tgl_absensi) = 24,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_24,
        MAX(IF(DAY(tgl_absensi) = 25,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_25,
        MAX(IF(DAY(tgl_absensi) = 26,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_26,
        MAX(IF(DAY(tgl_absensi) = 27,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_27,
        MAX(IF(DAY(tgl_absensi) = 28,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_28,
        MAX(IF(DAY(tgl_absensi) = 29,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_29,
        MAX(IF(DAY(tgl_absensi) = 30,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_30,
        MAX(IF(DAY(tgl_absensi) = 31,CONCAT(jam_masuk,"-",IFNULL(jam_keluar,"00:00:00")),"")) as tgl_31`)
            .join('karyawans', 'absensis.karyawan_id', '=', 'karyawans.id')
            .join('jams', 'absensis.jam_id', '=', 'jams.id')
            .whereRaw(MONTH(tgl_absensi)="${bulan}")
            .whereRaw(YEAR(tgl_absensi)="${tahun}")
            .groupByRaw('absensis.karyawan_id,nama_lengkap,akhir_jamMasuk,set_jamPulang')
            .get();

        if (request.exportExcel) {
            const time = new Date().toLocaleString('en-US', { timeZone: 'Asia/Jakarta' });
            // Fungsi header dengan mengirimkan raw data excel
            console.log("Content-type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            // Mendefinisikan nama file export "hasil-export.xls"
            console.log(Content-Disposition: attachment; filename=Rekap Absensi Karyawan ${time}.xls);
        }

        return view('dashboard.admin.laporan.cetakRekap', { namaBulan, tahun, bulan, rekap });
    }

    lokasi() {
        const hariIni = new Date().toISOString().split('T')[0];
        const karyawan = Auth.guard('karyawan').user();
        const cek = Absensi.where('tgl_absensi', hariIni).where('karyawan_id', karyawan.id).count();
        const lokasi = Cabang.find(karyawan.cabang_id);
        const jamKerja = JamsById.where('karyawan_id', karyawan.id)
            .join('jams', 'jams_by_ids.jam_id', '=', 'jams.id')
            .where('hari', this.getHari())
            .first();

        return view('absensi.lokasi', { cek, lokasi, jamKerja });
    }
}